/* autogenerated by Processing revision 1276 on 2022-06-10 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import processing.svg.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class polkadot extends PApplet {


PImage img;
int black = color(0, 0, 0);
int step;
int totalsteps;
ArrayList<Dot> hotPixels = new ArrayList<Dot>();


 public void setup() {
    /* size commented out by preprocessor */;
    img = loadImage("whale.png");
    img.resize(width-200, 0);
    img.resize(0, height-200);
    imageMode(CENTER);
    // image(img, width/2, height/2, width,height);
    step = 0;
    totalsteps = 10;
    sampleImageStoreBlackPixels();
    step = 0;
}

 public void draw() {
    // image(img, width/2, height/2, width,height);
    image(img, width/2, height/2);

    noLoop();
}

 public void sampleImageStoreBlackPixels() {
    img.loadPixels();
    for (int i = 0; i < img.pixels.length; i++) {
        // println(img.pixels[i]);
        if (img.pixels[i] == black) {
            int xloc = i % img.width;
            int yloc = i / img.width;
            PVector p = new PVector(xloc, yloc);
            
            if (random(1) < 0.01f) {
                if (step > totalsteps) {
                    step = 0;
                }
                Dot d = new Dot(p,step);
                hotPixels.add(d);
                img.pixels[i] = color(0,255,0);
                step = step + 1;
            }
        }   
    }
    img.updatePixels();
}
    



 public void recordSVG(int step){
    beginRecord(SVG, "output"+step+".svg");
    for (Dot o : hotPixels) {
        if (o.step >= step){
        PVector p = o.position;
        fill(o.dotcolor);
        ellipse(p.x, p.y, o.dotsize, o.dotsize);
        }
    }
    endRecord();
}


 public void keyPressed() {
    if (key == 's') {
        recordSVG(step);
        step++;
    } 

}


class Dot {
  PVector position;
  int dotcolor;
  int step;
  float dotsize;

  Dot(PVector position, int step) {
    int r = PApplet.parseInt(random(255));
    int g = PApplet.parseInt(random(255));
    int b = PApplet.parseInt(random(255));
    dotcolor = color(r, g, b, 128);
    dotsize = random(2,15);
    this.position = position.copy();
    this.step = step;

  }

   public void run() {

  }
}


  public void settings() { size(800, 800); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "polkadot" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
